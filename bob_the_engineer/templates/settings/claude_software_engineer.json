{
  "_template_info": {
    "name": "software-engineer",
    "description": "Development mode for serious engineering organizations",
    "best_for": "Shipping to production, code quality focus, established development practices",
    "permissions_summary": {
      "allow": [
        "Read-only file system operations for safe exploration and analysis",
        "Safe git operations for repository inspection and status checking",
        "Process and environment inspection for debugging and context"
      ],
      "deny": [
        "Git operations that could cause data loss or break team workflows",
        "Commands that could freeze or crash the system"
      ],
      "ask": [
        "Commands that could damage system integrity or security",
        "Network commands that could leak data or download malicious content",
        "Package managers that could install untrusted code or break dependencies",
        "Low-level file system commands that could corrupt data",
        "Commands that could break shell environment or execute arbitrary code",
        "Database commands that could delete or corrupt data",
        "Container commands that could disrupt services or delete resources",
        "Commands related to cryptocurrency mining that waste resources",
        "System monitoring commands that could expose sensitive information",
        "Archive commands that could package sensitive system files",
        "Commands that modify system scheduling or services",
        "Framework-specific commands that could break project configuration"
      ]
    }
  },
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(wc:*)",
      "Bash(tree:*)",
      "Bash(pwd)",
      "Bash(which:*)",
      "Bash(type:*)",
      "Bash(file:*)",
      "Bash(stat:*)",
      "Bash(du:*)",
      "Bash(df)",
      "Bash(git status)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git branch:*)",
      "Bash(git show:*)",
      "Bash(git remote -v)",
      "Bash(git stash list)",
      "Bash(ps:*)",
      "Bash(env)",
      "Bash(printenv)",
      "Bash(date)",
      "Bash(whoami)",
      "Bash(uname:*)"
    ],
    "deny": [
      "Bash(git add .)",
      "Bash(git add -A)",
      "Bash(git add --all)",
      "Bash(git commit -a:*)",
      "Bash(git commit --amend:*)",
      "Bash(git push --force:*)",
      "Bash(git push -f:*)",
      "Bash(git reset --hard:*)",
      "Bash(git clean -fd:*)",
      "Bash(git rebase:*)",
      "Bash(git merge --squash:*)",
      "Bash(*while true*)",
      "Bash(*fork*)",
      "Bash(:(){ :|:& };:)"
    ],
    "ask": [
      "Bash(sudo:*)",
      "Bash(su:*)",
      "Bash(rm -rf:*)",
      "Bash(rm -r:*)",
      "Bash(chmod 777:*)",
      "Bash(chmod -R:*)",
      "Bash(chown:*)",
      "Bash(kill -9:*)",
      "Bash(pkill:*)",
      "Bash(killall:*)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(nc:*)",
      "Bash(telnet:*)",
      "Bash(ssh:*)",
      "Bash(scp:*)",
      "Bash(rsync:*)",
      "Bash(npm install:*)",
      "Bash(yarn add:*)",
      "Bash(pip install:*)",
      "Bash(gem install:*)",
      "Bash(cargo install:*)",
      "Bash(go get:*)",
      "Bash(brew install:*)",
      "Bash(apt-get install:*)",
      "Bash(yum install:*)",
      "Bash(mkfs:*)",
      "Bash(mount:*)",
      "Bash(umount:*)",
      "Bash(dd:*)",
      "Bash(> /dev:*)",
      "Bash(export PATH=:*)",
      "Bash(unset:*)",
      "Bash(source ~/.bashrc)",
      "Bash(source ~/.zshrc)",
      "Bash(eval:*)",
      "Bash(exec:*)",
      "Bash(psql -c DROP:*)",
      "Bash(mysql -e DROP:*)",
      "Bash(mongo --eval drop:*)",
      "Bash(redis-cli FLUSHALL)",
      "Bash(docker rm -f:*)",
      "Bash(docker system prune:*)",
      "Bash(kubectl delete:*)",
      "Bash(helm delete:*)",
      "Bash(*coin:*)",
      "Bash(*miner:*)",
      "Bash(history)",
      "Bash(last:*)",
      "Bash(who:*)",
      "Bash(w:*)",
      "Bash(tar czf / :*)",
      "Bash(zip -r / :*)",
      "Bash(crontab:*)",
      "Bash(at:*)",
      "Bash(systemctl:*)",
      "Bash(service:*)",
      "Bash(npm run eject)",
      "Bash(rails db:drop)",
      "Bash(django-admin flush)",
      "Bash(php artisan migrate:fresh)"
    ],
    "defaultMode": "plan"
  },
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "90000",
    "BASH_MAX_OUTPUT_LENGTH": "20000",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",
    "PYTHONPATH": "."
  },
  "includeCoAuthoredBy": true,
  "cleanupPeriodDays": 30
}
