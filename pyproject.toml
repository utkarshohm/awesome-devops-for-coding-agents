[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["bob_the_engineer*"]

[project]
name = "bob-the-engineer"
version = "0.1.0"
description = "Agentic DevOps OSS"
authors = [{name = "Your Name"}]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "typer>=0.12",
  "rich>=13",
  "structlog>=23.1.0",  # Structured logging for CLI
]

[project.scripts]
bob-the-engineer = "bob_the_engineer.cli.app:app"

[project.optional-dependencies]
dev = [
  "pytest>=7.0",
  "pytest-cov>=4.0",
  "pytest-mock>=3.10",
  "pytest-xdist>=3.0",  # Parallel test execution
  "ruff>=0.1.0",
  "mypy>=1.0",
  "pre-commit>=3.0",
]

# Enhanced pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-config",
    "--strict-markers",
    "--cov=bob_the_engineer",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--log-cli-level=INFO",
    "--log-cli-format=%(asctime)s [%(levelname)8s] %(name)s: %(message)s",
    "--log-cli-date-format=%Y-%m-%d %H:%M:%S"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
markers = [
    "unit: marks tests as unit tests (fast, isolated)",
    "integration: marks tests as integration tests (slower, may require external resources)",
    "slow: marks tests as slow running",
    "cli: marks tests as CLI tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["bob_the_engineer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/.venv/*",
    "*/venv/*",
    "*/__pycache__/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = false
precision = 2

# Comprehensive ruff configuration (replaces black, isort, flake8)
[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "PL",  # pylint
    "S",   # flake8-bandit (security)
    "T20", # flake8-print (no print statements)
    "RUF", # ruff-specific rules
]
ignore = [
    # Line length (handled by formatter)
    "E501",  # line too long

    # Import rules (relaxed for CLI apps)
    "E402",  # module level import not at top

    # Complexity rules (reasonable for CLI apps)
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value comparison

    # CLI-specific allowances
    "T201",  # print statements allowed in CLI
    "S603",  # subprocess calls allowed for CLI tools
    "S607",  # starting process with partial path
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # asserts allowed in tests
    "PLR2004", # magic values allowed in tests
    "S106",    # hardcoded passwords in tests
    "S108",    # temp file creation
]

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = true
known-first-party = ["bob_the_engineer"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# MyPy configuration (for type checking)
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true

# Per-module mypy options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
